/*
 * Copyright Terracotta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'java'
  id 'maven'
  id 'com.github.johnrengelman.shadow' version '1.2.0'
}

def projectsToInclude = [':api', ':core', ':impl', ':107', ':xml']

dependencies {
  projectsToInclude.each {compile project(it)}
  shadow 'org.slf4j:slf4j-api:1.7.7'
  shadow group: 'org.terracotta', name: 'offheap-store', version: parent.offHeapVersion

}

shadowJar {
  baseName = 'ehcache'
  classifier = ''
  projectsToInclude.each {projName -> dependencies {include(project(projName))}}
  dependencies {
    include(dependency('org.terracotta.internal:statistics:1.0.3'))
  }
  fillManifest(manifest, 'ehcache')
  mergeServiceFiles()
}

task shadowSourceJar(type: Jar, dependsOn: shadowJar) {
  baseName = 'ehcache'
  classifier = 'sources'

  projectsToInclude.each {from project(it).sourceSets.main.allSource}
}

task shadowJavadocJar(type: Jar, dependsOn: shadowJar) {
  baseName = 'ehcache'
  classifier = 'javadoc'

  // This is brute force and not completely valid as we need to merge some files
  projectsToInclude.each {from project(it).javadoc.destinationDir}
}

artifacts {
  archives shadowJar
  archives shadowSourceJar
  archives shadowJavadocJar
}

def artifactFiltering = {
  addFilter('shadow') {artifact, file ->
    artifact.name == 'ehcache'
  }

  def shadowPom = pom('shadow')
  shadowPom.groupId = 'org.ehcache'
  shadowPom.artifactId = 'ehcache'
  shadowPom.scopeMappings.mappings.remove(project.configurations.compile)
  shadowPom.scopeMappings.mappings.remove(project.configurations.runtime)
  shadowPom.scopeMappings.mappings.remove(project.configurations.testCompile)
  shadowPom.scopeMappings.mappings.remove(project.configurations.testRuntime)
  shadowPom.scopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY, project.configurations.shadow, Conf2ScopeMappingContainer.COMPILE)
  pomFiller(shadowPom, 'Ehcache', 'Ehcache single jar, containing all modules')
}

install {
  repositories.mavenInstaller artifactFiltering
}

uploadArchives {
  repositories {
    mavenDeployer ({
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment)}

      if (isReleaseVersion) {
        repository(id: 'sonatype-nexus-staging', url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
          authentication(userName: sonatypeUser, password: sonatypePwd)
        }
      } else {
        repository(id: 'sonatype-nexus-snapshot', url: 'https://oss.sonatype.org/content/repositories/snapshots') {
          authentication(userName: sonatypeUser, password: sonatypePwd)
        }
      }
    } << artifactFiltering)
  }
}

